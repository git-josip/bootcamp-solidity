
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00                // [0]
    calldataload        // [first 32 bytes of calldata]
    0xe0                // [224, first 32 bytes of calldata]
    shr                 // [first 4 bytes of calldata] as it shifts right  32 bytes of calldata for 224
    dup1                // duplicate for second sig check
    
    __FUNC_SIG(foo)    // [keccak256 of our function selecter "foo()", first 4 bytes of calldata]
    eq foo jumpi       // will jump to the macro ADD_ONE if first 4 bytes of calldata equals the hash of "add1(uint256)"

    __FUNC_SIG(bar)    // [keccak256 of our function selecter "bar()", first 4 bytes of calldata]
    eq bar jumpi       // will jump to the macro ADD_ONE if first 4 bytes of calldata equals the hash of "add1(uint256)"

    0x00 0x00 revert    // reverts when the check for equality fails

    foo:
        FOO()
    
    bar:
        BAR()    

}

#define macro FOO() = takes(0) returns(0) {
    0x02 0x00 mstore

    0x20 0x00 return
}

#define macro BAR() = takes(0) returns(0) {
    0x03 0x00 mstore

    0x20 0x00 return
}