
/** 
 *  MAX_OF_ARRAY HUFF EXERCISE
 *  
 *  In this task, Given an abi encoded array of uint256, return its maximum value. Revert if the array is empty.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function maxOfArray(uint256[]) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    returndatasize
    calldataload 0xe0 shr                   // get func selector [selector]
    __FUNC_SIG(maxOfArray) eq maxOfArray jumpi   // jump if selector matches
    
    returndatasize returndatasize revert // else revert. using returndatasize instead of PUSH1 0x00, because there is bug in extension when compailer 
                                         // PUSH1 0x00 trnslated to PUSH0 opcode.  

    maxOfArray:
        0x24 calldataload                       // [arr length]. FIrst 4 bytes are fn selector and next 32bytes are offset value, for dynamic array.
        iszero                                  // [isArrayEmpty, arr.lenght] 
        revertOnError jumpi                        // returnZero if array is empty

        0x24 calldataload
        0x20 mstore                             // store length at 0x20 [length, balance]

        0x44 calldataload
        returndatasize mstore                             // currentMax
        
        0x44 
        0x40 mstore                        		// on 0x40 store pointer to first array elemnt in calldata.
                                                // calldata encoding: 
                                                //  0x2b2f487f   -> fun signature
                                                //  0000000000000000000000000000000000000000000000000000000000000020 -> offset. means that first element after is jsut arr.length. 
                                                //                                                                      number arr starts on 0x04 + 0x20 + 0x20 = 0x44
                                                //  0000000000000000000000000000000000000000000000000000000000000004 -> arr length
                                                //  0000000000000000000000000000000000000000000000000000000000000001 -> addresses start. 0 element
        numberLoop jump
    

    numberLoop:
        0x40 mload calldataload         // [load next number]
        returndatasize mload                      // [currentMax]                           
        lt updateCurrentMax jumpi

        0x01
        0x20 mload 
        sub        
        dup1                            // load length [length - 1] 
        iszero break jumpi              // checks for zero and returns when done
        0x20 mstore                     // store new length for later [new length] 
        
        0x40 mload 
        0x20 
        add                             // updates pointer [new pointer]
        0x40 mstore                     // saves new pointer for next address []
        numberLoop jump                 // repeat as long as length > 1

    updateCurrentMax:
        0x40 mload calldataload         // stored new max
        returndatasize mstore
        
        0x01
        0x20 mload 
        sub        
        dup1                            // load length [length - 1] 
        iszero break jumpi              // checks for zero and returns when done
        0x20 mstore                     // store new length for later [new length] 
        
        0x40 mload 
        0x20 
        add                             // updates pointer [new pointer]
        0x40 mstore                     // saves new pointer for next address []
        numberLoop jump                 // repeat as long as length > 1

    break:
        0x20 returndatasize return

    revertOnError:
        returndatasize returndatasize revert 
 }