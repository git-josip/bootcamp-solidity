
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00                // [0]
    calldataload        // [first 32 bytes of calldata]
    0xe0                // [224, first 32 bytes of calldata]
    shr                 // [first 4 bytes of calldata] as it shifts right  32 bytes of calldata for 224
    dup1                // duplicate seelctor so we can read it twice for signature

    __FUNC_SIG(store) eq store jumpi    // [keccak256 of our function selecter "add1(uint256)", first 4 bytes of calldata]
    __FUNC_SIG(read)  eq read jumpi     // [keccak256 of our function selecter "add1(uint256)", first 4 bytes of calldata]
    
    0x00 0x00 revert    // reverts when the check for equality fails

    store:
        STORE()
    read:
        READ()    
}

#define macro STORE() = takes(0) returns(0) {
    0x04 calldataload   // loads 32bytes after the first 4 bytes
    0x00                // [0x00, inputFromCallData]
    sstore              // store input from calldata

    0x00 0x00 return
}

#define macro READ() = takes(0) returns(0) {
    0x00 sload 
    0x00 mstore         // load value at 0th slot and store the value at 0x00 in memory in order to return it
    0x20 0x00 return    // returns 32bytes at offset 0 where our result lies
}