/Users/mozzer/development/blockchain/mozzer-rareskills-solidity-bootcamp/4_week/5_TokenWhaleChallenge/echinda/TokenWhaleChallenge.sol
  1 |     | pragma solidity 0.7.0;
  2 |     | 
  3 |     | contract TokenWhaleChallenge {
  4 |     |     address player;
  5 |     | 
  6 |     |     uint256 public totalSupply;
  7 | *   |     mapping(address => uint256) public balanceOf;
  8 | *   |     mapping(address => mapping(address => uint256)) public allowance;
  9 |     | 
 10 | *   |     string public name = "Simple ERC20 Token";
 11 | *   |     string public symbol = "SET";
 12 | *   |     uint8 public decimals = 18;
 13 |     | 
 14 |     |     constructor(address _player) public {
 15 |     |         player = _player;
 16 |     |         totalSupply = 1000;
 17 |     |         balanceOf[player] = 1000;
 18 |     |     }
 19 |     | 
 20 | *   |     function isComplete() public view returns (bool) {
 21 | *   |         return balanceOf[player] >= 1000000;
 22 |     |     }
 23 |     | 
 24 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 25 |     | 
 26 | *   |     function _transfer(address to, uint256 value) internal {
 27 | *   |         balanceOf[msg.sender] -= value;
 28 | *   |         balanceOf[to] += value;
 29 |     | 
 30 | *   |         emit Transfer(msg.sender, to, value);
 31 |     |     }
 32 |     | 
 33 | *   |     function transfer(address to, uint256 value) public {
 34 | *r  |         require(balanceOf[msg.sender] >= value);
 35 | *   |         require(balanceOf[to] + value >= balanceOf[to]);
 36 |     | 
 37 | *   |         _transfer(to, value);
 38 |     |     }
 39 |     | 
 40 |     |     event Approval(
 41 |     |         address indexed owner,
 42 |     |         address indexed spender,
 43 |     |         uint256 value
 44 |     |     );
 45 |     | 
 46 | *   |     function approve(address spender, uint256 value) public {
 47 | *   |         allowance[msg.sender][spender] = value;
 48 | *   |         emit Approval(msg.sender, spender, value);
 49 |     |     }
 50 |     | 
 51 | *   |     function transferFrom(address from, address to, uint256 value) public {
 52 | *r  |         require(balanceOf[from] >= value);
 53 | *   |         require(balanceOf[to] + value >= balanceOf[to]);
 54 | *r  |         require(allowance[from][msg.sender] >= value);
 55 |     | 
 56 | *   |         allowance[from][msg.sender] -= value;
 57 | *   |         _transfer(to, value);
 58 |     |     }
 59 |     | }

/Users/mozzer/development/blockchain/mozzer-rareskills-solidity-bootcamp/4_week/5_TokenWhaleChallenge/echinda/TokenWhaleChallengeEchidna.sol
  1 |     | // SPDX-License Identifier:MIT
  2 |     | 
  3 |     | pragma solidity 0.7.0;
  4 |     | 
  5 |     | import "./TokenWhaleChallenge.sol";
  6 |     | 
  7 | *r  | contract TokenWhaleChallengeEchidna is TokenWhaleChallenge {
  8 | *   |     TokenWhaleChallenge public token;
  9 |     | 
 10 |     |     constructor() public TokenWhaleChallenge(msg.sender) {}
 11 |     | 
 12 |     |     function echidna_test_balance() public view returns (bool) {
 13 |     |         return !isComplete();
 14 |     |     }
 15 |     | 
 16 | *   |     function testTransfer(address, uint256) public view {
 17 |     |         // Pre conditions
 18 |     |         // actions
 19 |     |         // Check that isComplete function returns true or false as expected
 20 | *   |         assert(!isComplete());
 21 |     |     }
 22 |     | }

